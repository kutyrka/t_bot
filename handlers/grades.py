import logging
from telegram import Update
from telegram.ext import MessageHandler, filters, CallbackContext
from services.decorators import student_required
import aiohttp
from io import BytesIO
import matplotlib.pyplot as plt
from datetime import datetime
from typing import Dict, List
from config import config

logger = logging.getLogger(__name__)

async def fetch_subjects_for_group(group_id: int) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ Supabase."""
    try:
        logger.debug(f"Fetching subjects for group {group_id}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ —Ö—Ä–∞–Ω–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        response = config.supabase.rpc(
            'get_group_subjects', 
            {'p_group_id': group_id}
        ).execute()
        
        # –ò–ª–∏ –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
        # response = config.supabase.from_('public.group_subjects') \
        #     .select('subject:subjects(subject_name)') \
        #     .eq('group_id', group_id) \
        #     .execute()
        
        if not response.data:
            logger.warning(f"No subjects found for group {group_id}")
            return []
            
        subjects = [item['subject_name'] for item in response.data]
        logger.info(f"Found subjects: {subjects}")
        return subjects
        
    except Exception as e:
        logger.error(f"Error fetching subjects: {e}", exc_info=True)
        return []

async def fetch_grades(student_id: int) -> Dict[str, List[str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ Supabase."""
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ —Ö—Ä–∞–Ω–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        response = config.supabase.rpc(
            'get_student_grades',
            {'p_student_id': student_id}
        ).execute()
        
        # –ò–ª–∏ –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º JOIN
        # response = config.supabase.from_('student_grades') \
        #     .select('grade_value, subjects!inner(subject_name)') \
        #     .eq('student_id', student_id) \
        #     .order('date') \
        #     .execute()
        
        grades_by_subject = {}
        for entry in response.data:
            subject_name = entry['subject_name']
            grade = str(entry['grade_value'])
            grades_by_subject.setdefault(subject_name, []).append(grade)
            
        logger.debug(f"Grades data: {grades_by_subject}")
        return grades_by_subject
        
    except Exception as e:
        logger.error(f"Error fetching grades: {e}", exc_info=True)
        return {}

def generate_grades_image(subjects: List[str], grades_data: Dict[str, List[str]]) -> List[BytesIO]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ—Ü–µ–Ω–æ–∫: –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã, 15 –æ—Ü–µ–Ω–æ–∫."""
    try:
        if not subjects:
            raise ValueError("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ü–µ–Ω–æ–∫")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = [["–ü—Ä–µ–¥–º–µ—Ç"] + [f"–û—Ü–µ–Ω–∫–∞ {i+1}" for i in range(15)]]
        for subject in subjects:
            grades = grades_data.get(subject, [])
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ 15 –æ—Ü–µ–Ω–æ–∫, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ - "-"
            grades.extend(["-"] * (15 - len(grades)))
            table_data.append([subject] + grades[:15])

        # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fig, ax = plt.subplots(figsize=(15, len(table_data) * 0.5))
        ax.axis('off')

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        table = ax.table(
            cellText=table_data,
            loc='center',
            cellLoc='center',
            colWidths=[0.2] + [0.05] * 15,
            cellColours=[['lightgray'] * 16] + [['white'] * 16 for _ in range(len(table_data) - 1)]
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        table.scale(1.2, 1.5)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
        for (i, j), cell in table.get_celld().items():
            cell.set_edgecolor('black')
            cell.set_linewidth(0.5)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buf = BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight', dpi=150)
        buf.seek(0)
        plt.close()
        return [buf]

    except Exception as e:
        plt.close()
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@student_required
async def handle_grades(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'üìä –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏'"""
    try:
        logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handle_grades")
        student_id = context.user_data.get('user_id')
        group_id = context.user_data.get('group_id')
        if not student_id or not group_id:
            logger.warning("student_id –∏–ª–∏ group_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –∏–ª–∏ –≥—Ä—É–ø–ø—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã
        subjects = await fetch_subjects_for_group(group_id)
        if not subjects:
            logger.warning("–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
        grades = await fetch_grades(student_id)
        if not grades:
            logger.info("–û—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_buffers = generate_grades_image(subjects, grades)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for idx, image_buffer in enumerate(image_buffers, 1):
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=image_buffer,
                caption=f"üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏"
            )
            image_buffer.close()

    except Exception as e:
        logger.error(f"Grades error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

def setup_grades_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–æ–∫"""
    app.add_handler(MessageHandler(
        filters.Regex(r'üìä\s*–ú–æ–∏\s*–æ—Ü–µ–Ω–∫–∏'),
        handle_grades
    ))