from telegram import Update, ReplyKeyboardRemove
from telegram.ext import CallbackContext, MessageHandler, filters, ConversationHandler
from config import config
from keyboards import get_student_menu, get_teacher_menu, get_admin_menu
import logging

logger = logging.getLogger(__name__)

AWAITING_CREDENTIALS = range(1)

async def start_login(update: Update, context: CallbackContext):
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: ivanov 12345",
        reply_markup=ReplyKeyboardRemove()
    )
    return AWAITING_CREDENTIALS

async def handle_credentials(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        credentials = update.message.text.strip().split(maxsplit=1)
        if len(credentials) != 2:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
            return AWAITING_CREDENTIALS
        
        username, password = credentials
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: username={username}")
        logger.debug(f"Trying to authenticate user: {username}")

        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users
        user_response = config.supabase.table('users') \
            .select('*') \
            .eq('username', username) \
            .execute()
        
        logger.debug(f"User response: {user_response}")

        if not user_response.data:
            logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return AWAITING_CREDENTIALS

        user = user_response.data[0]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['user_id']}, —Ä–æ–ª—å: {user['role_id']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if user.get('password_hash') != password:
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return AWAITING_CREDENTIALS

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞, –µ—Å–ª–∏ role_id == 3
        student_data = None
        if user['role_id'] == 3:  # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            if user['user_id'] < 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
                logger.error(f"Invalid student_id: {user['user_id']}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞")
                return AWAITING_CREDENTIALS
            
            logger.debug(f"Fetching student data for user_id: {user['user_id']}")
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                student_response = config.supabase.rpc(
                    'get_student_data',
                    {'p_user_id': user['user_id']}
                ).execute()
                
                logger.debug(f"Student response: {student_response}")
                
                if student_response.data:
                    student_data = student_response.data
                    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_data}")
                else:
                    logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
                    student_data = None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞: {str(e)}")
                student_data = None

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data.update({
            'authenticated': True,
            'user_id': user['user_id'],
            'role_id': user['role_id'],
            'full_name': f"{user['first_name']} {user['last_name']}",
            'group_id': student_data['group_id'] if student_data else None,
            'group_name': student_data['group_name'] if student_data else None,
            'schedule_id': student_data['schedule_id'] if student_data else None
        })
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ user_data: {context.user_data}")

        # –í—ã–±–æ—Ä –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user['role_id'] == 3:
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!",
                reply_markup=get_student_menu()
            )
        elif user['role_id'] == 2:
            await update.message.reply_text(
                f"üë®‚Äçüè´ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['first_name']}!",
                reply_markup=get_teacher_menu()
            )
        else:
            await update.message.reply_text(
                f"üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!",
                reply_markup=get_admin_menu()
            )

        return ConversationHandler.END

    except ValueError as ve:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: {str(ve)}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return AWAITING_CREDENTIALS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return AWAITING_CREDENTIALS

def setup_auth_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"]), start_login)],
        states={
            AWAITING_CREDENTIALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_credentials)]
        },
        fallbacks=[],
        conversation_timeout=300  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
    )
    app.add_handler(conv_handler)