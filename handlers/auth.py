from telegram import Update, ReplyKeyboardRemove
from telegram.ext import CallbackContext, MessageHandler, filters
from config import config
from keyboards import get_student_menu, get_teacher_menu, get_admin_menu
import logging

logger = logging.getLogger(__name__)

async def start_login(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: ivanov 12345",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data['auth_stage'] = 'awaiting_credentials'

async def handle_credentials(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if context.user_data.get('auth_stage') != 'awaiting_credentials':
        return

    try:
        username, password = update.message.text.strip().split(maxsplit=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = config.supabase.table('users') \
            .select('*') \
            .eq('username', username) \
            .eq('password_hash', password) \
            .execute()

        if not user_response.data:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return

        user = user_response.data[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        student_data = None
        if user['role_id'] == 3:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            student_response = config.supabase.table('students') \
                .select('group_id, groups(group_name, schedule_id)') \
                .eq('student_id', user['user_id']) \
                .execute()
            student_data = student_response.data[0] if student_response.data else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.update({
            'authenticated': True,
            'user_id': user['user_id'],
            'role_id': user['role_id'],
            'full_name': f"{user['first_name']} {user['last_name']}",
            'group_id': student_data['group_id'] if student_data else None,
            'group_name': student_data['groups']['group_name'] if student_data else None,
            'schedule_id': student_data['groups']['schedule_id'] if student_data else None
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        if user['role_id'] == 3:  # –°—Ç—É–¥–µ–Ω—Ç
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!",
                reply_markup=get_student_menu()
            )
        elif user['role_id'] == 2:  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            await update.message.reply_text(
                f"üë®‚Äçüè´ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['first_name']}!",
                reply_markup=get_teacher_menu()
            )
        else:  # –ê–¥–º–∏–Ω
            await update.message.reply_text(
                f"üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!",
                reply_markup=get_admin_menu()
            )

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        logger.error(f"Auth error: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    finally:
        context.user_data.pop('auth_stage', None)

def setup_auth_handlers(app):
    app.add_handler(MessageHandler(filters.Text(["üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"]), start_login))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_credentials))