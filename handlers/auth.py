from telegram import Update, ReplyKeyboardRemove
from telegram.ext import CallbackContext, MessageHandler, filters
from keyboards import get_student_menu
from config import config
import logging

logger = logging.getLogger(__name__)

async def start_login(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å"""
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: ivanov 123456",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data['auth_stage'] = 'awaiting_credentials'

async def handle_credentials(update: Update, context: CallbackContext):
    if context.user_data.get('auth_stage') != 'awaiting_credentials':
        return
    
    try:
        username, password = update.message.text.strip().split(maxsplit=1)
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        response = config.supabase.table('users') \
            .select('user_id, role_id, first_name, last_name') \
            .eq('username', username) \
            .eq('password_hash', password) \
            .maybe_single() \
            .execute()

        if not response.data:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return

        user = response.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç (role_id = 3)
        if user['role_id'] != 3:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
        context.user_data.update({
            'authenticated': True,
            'user_id': user['user_id'],
            'role': 'student',
            'full_name': f"{user['first_name']} {user['last_name']}"
        })
        
        # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã students
        student_data = config.supabase.table('students') \
            .select('group_id') \
            .eq('student_id', user['user_id']) \
            .single() \
            .execute()
        
        if student_data.data:
            context.user_data['group_id'] = student_data.data['group_id']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']}!\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.",
            reply_markup=get_student_menu()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º stage –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        context.user_data.pop('auth_stage', None)

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        logger.error(f"Auth error: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

def setup_auth_handlers(app):
    app.add_handler(MessageHandler(filters.Text(["üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"]), start_login))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_credentials))