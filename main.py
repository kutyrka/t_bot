from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)
from config import Config  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Config –≤–º–µ—Å—Ç–æ config
from keyboards import get_main_menu
from handlers.schedule import show_schedule_options, handle_week_choice
from handlers.grades import show_grades
from handlers.feedback import start_feedback, save_feedback
from handlers.news import show_news
import logging

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    message = await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–ª–ª–µ–¥–∂–∞!",
        reply_markup=get_main_menu()
    )
    context.user_data['last_bot_message_id'] = message.message_id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏

async def error_handler(update: object, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f'–û—à–∏–±–∫–∞: {context.error}', exc_info=True)
    if update and isinstance(update, Update):
        await update.message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    try:
        app = ApplicationBuilder() \
            .token(Config.TOKEN) \
            .build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            MessageHandler(filters.Text(["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]), show_schedule_options),
            MessageHandler(filters.Text(["üìä –û—Ü–µ–Ω–∫–∏"]), show_grades),
            MessageHandler(filters.Text(["üí¨ –û–±—Ä–∞—â–µ–Ω–∏–µ"]), start_feedback),
            MessageHandler(filters.Text(["üì¢ –ù–æ–≤–æ—Å—Ç–∏"]), show_news),
            MessageHandler(
                filters.Text(["–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"]),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
                handle_week_choice
            ),
            MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                save_feedback
            )
        ]

        for handler in handlers:
            app.add_handler(handler)

        app.add_error_handler(error_handler)

        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()

    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()